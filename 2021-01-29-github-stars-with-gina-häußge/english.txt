>> Eddie: Hello, everyone, welcome to number three, the third episode in our GitHub stars series. And today I have the awesome Gina with us. And Gina has got an amazing open source project that she works on full time. And so you know enough for me, I want to let Gina introduce herself. And we can hear more about her journey, her adventures and what she's the amazing stuff she achieving, and what she's got planned for the rest of the year. So Gina, please tell us about yourself.

>> Gina: Well, thank you, Eddie. First of all, thanks for letting me be here. Yeah, my name is Gina huesca. That's a bit of a tricky name for a lot of people who did not grow up in Germany.And I am the creator and maintainer of a little nifty project called octoprint, which is like a remote monitoring slash baby monitor solution for 3d printers, which people can just install on the little Raspberry Pi or something like that, and attach to the 3d printer and then have it enhanced by with a bit with a weapon to face which they can monitor everything about which they can send jobs to install plugins and all that stuff. And yeah, that's me.

>> Eddie: That sounds awesome. I want to know more about that. But I suppose before we get to that, so how did you get into tech? Like, when did you start? Was it uni? Was it before or after? 

>> Gina: Way, way before actually. So I, I was always a bit of a weird child, I think. Because at age three, I already wanted like a huge heavy drill hammer and all that. But around when I was six or seven or so my parents got the first computer of the household, which back then was an Apple TV and I wanted to play with that. But my dad told me Yeah, well, you know that that is more like a tool, not not a plate, not not a toy. And but I can tell you, I shot can show you something awesome. And so he introduced me to basic.I could not speak a word of English back then. And everything in basic is English. So that was a bit weird. But yeah, but he showed me some basic commands. And yeah, instead of the more like, traditional hello world. In my case, it was the name of a very popular children's TV show in Germany that was running in an endless loop on the screen after a couple of minutes. And that was how Yeah, basically, it was love at first sight. And ever since then, I have been coding.And I've always been interested in tech stuff and and figuring out how stuff works, how things work. I always disassembled everything that I got my hands on as a child. And so that was, I think, a natural segue so to speak. And what I also absolutely loved and still actually do love and to this day do is build Lego. And computer programming is a bit like building with Lego but without you ever running out of bricks in my opinion. So that was also like a natural fit for me. So but this is how I got started.

>> Eddie: I like the way you explain that coding is like Lego. But it's like it's digital. You never run out of bricks. I love that I'm so good at

>> Gina: and you can even Yeah, and you can even build your own bricks. I mean, if you need we need one that has a specific shape, right you can just you don't have to wait for Lego to produce it. You just do it yourself.
 
>> Eddie: Love that, that is right it's building blocks. I really like that we use other libraries packages to help us do it. We can write our own as well. Which I think is is awesome. So let's hear more about I love your open source project. I think it's awesome. Like it's in, you know, in the 3d printing space, which is just so exciting. So awesome. And how did you come about with this idea? Was it one of those situations where it was, you know, scratch your own itch did you do have allegedly something missing and you built something for yourself and then it just kind of grew from there.

>> Gina: Exactly that so I got myself my first 3d printer back in, I think November 2012. 2012 Yeah, 2012 and it was sitting right here next to me in my office. And well back then printers do not necessarily have their own memory or anything on it, like they do these days where you can at least plug an SD card in and print from that. But you still had to have a T shirt to your, to your computer, and stream all the commands to it and all that. And that was somewhat annoying when you're also trying to use the computer for something else, like playing a game or work or whatnot. And also, for hours on end, that thing would sit next to me and produce noises and fumes which also, I mean, they are not that bad. But if they do it for hours and hours and hours, they can just go on your nerves. And yeah, so there was a point where I figured Okay, then there needs to be some kind of solution for this problem, I cannot be the only one who has ever experienced that. And so I I started looking around the Raspberry Pi had just come out in that year. And I looked for something that I could just run on a PI and put the PI on the on the printer and and plugging the WiFi dongle back down to pi did not come with WiFi on board, and be able to remotely monitoring and remote control it and all that. And it turned out there was simply no such thing yet. There were some projects, which treated the printer like a black box where you would just push code there and hope it would get printed. But you did not know if it actually was doing anything. There was no back channel so to speak. And that was something that did not work for me at all. So yeah, I was still employed with a big Yeah, IT custom solution Development Corporation kind of thing back then. So I was a coder, or rather than a software architect by day. And so it's came somewhat naturally to me to also take the opportunity to start up a new pet project because it had been awhile since I last heard something like this. And at work, they did not let me get close to code anymore because it was too expensive or something. And so over the course of my Christmas break, I sat down and wrote up the very, very, very, very first version of octoprint, which back then was called, I think it even was called cura web UI at first because it was forked off another project that in order soy kit, could you reuse the communication they had because I had no idea about printer communication back then. And so I just plugged this on top, and it worked somehow. And then people complain that they had to install all of cura in order to run that thing that I built, so extracted it and then it took off from there. So I, I believe so after the after the end of my Christmas vacation, I figured Okay, it's doing everything that I wanted to do. Now, I'm done with this, and just went back to my regular job. And suddenly I started getting emails and issues and all that from all over the world. And can you make it to that? And can you make it also do that? And hey, by the way, I have this other kind of printer with this different kind of firmware, and it does this and this differently? And can we maybe make it work with your thing as well. And around that time, that was when I realized, okay, apparently other people do have the same problems as I do. And I need to maybe think about how to make this better. So it works for everyone. And not just me. And yeah, that was also when it got an actual name and all that. 

>> Eddie:And what which when you said you did it over the holiday season What Which holiday season was that? Like how many years ago?

>> Gina: 2012

>> Eddie: Oh, it was back then. Okay, so Okay.

>> Gina: Yes. So So it started over eight years ago.

>> Eddie: Nice.

>> Gina: And I think I did the first public post about it on December 25 2012.

>> Eddie: Got you and what what technology did you use? What was it written in?

>> Gina: Python Yeah, so initially, I took a look at node j. s. But back then at least I don't know if things are different these days. But back then the ecosystem simply wasn't there yet. Especially not if you were trying to stay platform compatible and cross platform compatible, which was also a goal that I had, because maybe not everyone wants to run it on a Raspberry Pi, but on an old laptop or something so and I also wanted to be able to develop it on my workstation, which to this day still runs Windows because I also am a gamer and I do not want to constantly reboot just to work or game. And that so so I did so I decided on Python until Akira was also written in Python. So I could just use these parts that I still have the communication layer built on these days and go from there and I had learned Python. A couple of years ago before that, when I was so I started, right after university, maybe I should go a bit back. So after I realized, hey, the coding is like Lego bricks without running out of bricks, I decided I need to do this somehow in my life, then I learned software engineer is an actual job that people can do. And from that point on, so maybe like, when I was 12, or so I was dead set on becoming a software engineer. So University was a natural thing to do right after graduating from school. And so I studied software engineering, or computer science, rather. And right after that, I figured I wasn't really sure yet what to do next, with my life and position opened up at the university to be a system administrator. And so I did that. And this is where I learned Python properly. Because, yeah, for system administration for automating some stuff, it can be quite nice to have. And, yeah, this is basically what I then was able to build upon with when octoprint started or happened or whatever.

>> Eddie: And when did you go full time onto it? So when did you leave your job and go full time to it.

>> Gina: So that was a bit of a process, because so things exploded, right and around? Yeah, let's say at the start of 20, at the middle of 2013. Or so it was it got quite clear that I could not do this completely just in my free time anymore, because the project was just too big, and the user base was too big and all that. And so I first talked my employer into giving me one day off. So I reduced my contract to 80% at 80%. Pay, obviously, and got them to make it make sure that I at least could dedicate Mondays as well to the project. So it went like that until the early months, I think February or March or so of 2014 when I realized, Okay, this one day per week, this is not really enough anymore. And I need to find a way to either work full time on this, or I have to drop this because at this point, it was become becoming quite unhealthy and really not sustainable. All evenings were spent on the project or weekends were spent on the project. Most of the vacation days, my friends and family were a bit of well bit pissed at me at this point as well. So and I also noticed it in my health that I was simply not getting the rest that I needed, because I was constantly just either coding on work or coding or working at work on staff or working off to print. And just at that time, suddenly an email found its way into my inbox from a company, the Spanish 3d printer company who offered to hire me full time to work on octoprint because they they basically said, Hey, we like what you're doing. We want want to invite you here to visit us and let's talk maybe if you want to get on board with us and work full time on octoprint. So I said, I immediately got on a plane to Madrid. And we talked and we came to a conclusion. And this is how I turned it full time in August 2014. Ben said companies sadly ran into some let's call it economical difficulties in in early 2016. And that was when I suddenly found myself with a full time open source project on my hand but no funding. 

>> Eddie: Right Okay, that's quite challenging.

>> Gina: Yep. And this was the point where I figured Okay, I am deathly afraid of this whole situation because of this up until this point, I had always been in a regular employment situation, right. So I had a contract and salary and all that and Social Security, security insurances, all the all the nine yards of regular German work life. And now I had the option of either letting octoprint go and going back into something like that by finding another job, which I was fairly sure would quickly find given my CV,or, and I was quite sure if I did not try that I would kick myself for the rest of the of my life. Try if I could somehow make it work through crowdfunding,

>> Eddie: okay.

>> Gina: And that was when I turned to Patreon and fired up a campaign and rallied people to basically put their money where their mouth is because the project was in crisis. And it was either that supporting me somehow or I had to give up on that. And, yeah, to my utter surprise, it worked. So people did in fact, immediately jump on this campaign and contributed and yeah, that was quite, it was quite the awesome experience. And to this day, I cannot really, I cannot really grasp it really to this day, like there are 1000s of people now who give as little as $1 per month, or as much as 20. And, and simply make it work so that the whole mass of people together makes it so that I can do this full time. And I can do this now full time in this mode for over four years now. And this is just amazing. It's stressful, and it's it's insane. And but it's amazing.
 
>> Eddie: That's so cool. And you answered my question already. I was gonna ask what sort of donations do you get? Are they around the, you know, the one to 20? Or are they in the hundreds of 1000s? So it sounds like you go for, like small donation donations, but a bigger amount of people.

>> Gina: Yeah, yeah. in general. It's like, I mean, there are some I have two, two legs, basically in which are standing donation wise, one side is the recurring ones where Patreon via GitHub sponsoring by via, donor box and libera pay. And those are like smaller things. But there's also one time donations and those sometimes are a bit bigger. It always depends. So like, I do not make rules there. People give me how many they want, how much they can and they want, and I'm grateful for everything, be it $1 or be it obviously, more than $1.

>> Eddie: That's I mean, that's just awesome. I know a lot of people I'm seeing from the chat. Now I know a lot of people, you know want to get into open source full time. I know that I do a lot of open source as well. And people know my story. So I'm not going to go into that. But it's interesting that you know, you you've done yours via Patreon and similar platforms, and that's worked out really well and you've been going strong. And do you find that as time goes on, it is getting stronger as well as in our other than a shut up other nations overall kind of increasing that in the future, you might be able to potentially hire someone else to help you as well. Is that a possibility?

>> Gina: It's hard to say to be honest. So I'm hoping that someday This is something that will be possible though. In Germany, there's a lot of red tape associated with actually hiring someone a lot more than in other countries. Which makes this a bit more tricky to pull off. But I hope that maybe someday it will get there. It is fluctuating. So right now it's at a point I would say where I'm keeping up with with inflation and all that but it's always a bit tricky. I always I also have started to to try to Yeah, basic basically diversify. So that's not just donations. I'm also using ad revenue. I use sponsorships by by corporations now as well. And, and also stuff like merchandise says, though, that is like really, really little amount. But still, this is stuff that I also have started doing. And the other The idea is basically, the shock of losing this this this gig that I had that allowed me to do it full time because one company couldn't afford it anymore has taught me that. I think if you want this to work in some way in open source, you really need to diversify, you need to spread it as far and wide as possible across as many sources as possible. So that if one cannot do it anymore, be it a $1 person or be it a $1,000 Corporation. It might still hurt but it will not hurt as much it will not put the project at risk.

>> Eddie: That's very true. And we've got a question here from Santosh, another GitHub star who was on my channel, I think, last week or the week before? So if I can maybe generalize this question a bit, I guess from your different sources of income, what's the percentage that you kind of that makes up your income? So I'm guessing Patreon makes up the biggest chunk that you get?

>> Gina: Yeah, yep, definitely.

>> Eddie: And then the smallest chunk is that getting to be the the swag sales?

>> Gina: Yeah, yeah. That that would be that, I guess. 

>> Eddie: How does

>> Gina: the rest of slug in between

>> Eddie: Okay, how does GitHub sponsors I guess sit in that scale roughly? Is it catching up with Patreon? Or Not really?

>> Gina: Oh, it's far away. Like it's, it's currently like at at? How do you say? Like a 10th? Maybe off? 

>> Eddie: Okay.

>> Gina: off of Patreon. But obviously, I mean, Patreon has been there longer as well. And this was also the platform that I started on. And, yeah, it's just spread across it. But but from the from the one time from the recurring donation platforms, one, GitHub sponsors, I think is the second rank right now for me.

>> Eddie: Okay. Okay, that sounds 

>> Gina: with regards to what I get back from it. Yeah.

>> Eddie: Sounds good. And here's a question from VyVy-Vi, let me bring it up on the screen. How often does full time open source become economically viable? Is it better to do half and half, or work in paid roles for a few years, and then full time open source while using save money?

>> Gina: It's tricky, I think, to make it become economically viable. So in my case, I think I just had the perfect storm of having a committed community already who had said, who I had been able to show that I can deliver, and that I can do a good job. And that I think, enabled this to work mostly, but I cannot really say what is the best approach here, what I, what I would advise against from a sustainability and personal health kind of position is actually to try to do it at the same time both as I mean, what, what what I think is important, if you do open source, and you do not do it yet full time, then make extra extra sure that you do not overwork yourself, because the last thing you want is to I mean, we do open source at the beginning at least. And I personally still do it for fun, right? Because we like growing with it. And we like helping people and we like learning new stuff. And we like solving problems maybe and playing with Lego bricks that never run out. And so when you do that, and but you also have to run a day job, it can start to feel like a second job. And it can stop being fun. And it can start to quickly dissolve in or devolve into into burnout territory. And this is something that you have to be really, really careful of. So yeah, the last thing you want is something that you love to be actually something you start hating.

>> Eddie: So very true. It's very true, it is hard work at the beginning, I think it's just finding that balance. So you want to work hard, so you can keep pushing forward. But like you said, not work too hard, where you burn out, and then you start to to hate it as well.

>> Gina: Yeah, I think you should just not try to force it. Because I mean, I'm very, very much aware that what the the situation that I find myself in that that was like a one of one of one of a kind of situation, like being able to start out funded by a corporation being able to grow the project during that. And then switching to crowdfunding, and I'm not sure if I had been able to pull this off. If I hadn't had this, this almost two years of being able to already work on it full time in a in a financially secure setting. And proving my worth, so to speak, and also laying some groundwork that then I could more easily build up on after. So yeah.

>> Eddie: Okay, so next question is quite an interesting one from I think it's Alex says, How do you see the future of open source? I know everyone knows my answer to this. So I think it's probably better for you to go first.

>> Gina: How do I see it? Or how do I hope to see it?

>> Eddie: Both I suppose do both. Yeah. Realistic? dream?

>> Gina: Yeah. I mean, what, maybe maybe something in the middle of it. So what I really hope is that, wait, I have to quickly fight with my earpiece, again, when I really hope happening, I hope to see happening sooner rather than later is this, this this concept of funding open source becoming more mainstream, because right now most people who use open source tools, and this also includes people who use open source tools in a commercial setting, like people working in a company building stuff up on open source tools, they rarely seem to think about how open source gets created, and this it just does not fall from the heavens or something like that. It gets created by people and people need to eat and people need to live and they need a roof above their head and they need a bed to sleep in. And they also need hardware to develop that stuff on. So this is something that a lot of people are still either ignoring or simply not thinking about. And I hope that this may be change, maybe changes in the future and that hopefully people also with stuff like GitHub sponsors and Patreon and all that becoming more visible in the community. People will become more aware that in order for openSUSE to move forward and to for projects to actually get to a point where they are like at a professional level and and can can actually stay at a certain level of quality so that they also can constantly be considered for commercial work and all that yeah, they should be funded. And we cannot just always hope that these people will get hired by some company. Because a, maybe they do not want to get hired by one single company, because that also puts you in weird positions that I've been in myself where your company says your, your focus should be this feature, but your user base says, but your focus actually should be that other feature, and then you are the maintainer in the middle and are torn between the two. And I like, okay, I do not know what I should be working on now. So instead of this, it, I think it would be nice if we could achieve something like this situation where open source developers can actually live from what they do, just by them doing it. So from donations from sponsorships and all that and not by having to rely on being employed somewhere, or having to sell support contracts additionally, or something. Because if you are already, if you already need 100% of your time working on an open source project in order to maintain it and improve it and all that, then you cannot wait, where should you find the time to also squeeze in paid work then? Right? So is this?

>> Eddie: Yeah, I agree. It is hard to go back to balance again, as well. I think a lot of companies that make big money from using open source to build that project. They don't fund a single kind of center Penny or what is it in euros? Is it sent to the no button that wants to mount it?

>> Gina: We also have cents,

>> Eddie: okay. Sounds Okay, cool. And they don't they don't even think about that. They just think well, this is just a product that probably a big company is is he's got loads of money like Microsoft or Google, they can do this for free. It's fine yet. I see that 

>> Gina: I even get back with Octopod.

>> Eddie: Really?

>> Gina: So I yeah, I get a lot of people who are like, yeah, the team of octoprint. All these guys. And also people think octoprint is done by I don't know how many people 20 or so all of which obviously, are only male, of course or even like a whole company. And then when people learn. Wait, it's primarily me. Also, I'm female. Hi. They are like, what? So yeah, a lot of people just don't think about it, I think and they just don't try to figure out who even makes their the projects that they run, which is kind of ever since I found myself in this situation, I've started actually trying to figure out who makes the projects that I use. So that's been an educated educational experience as well, I have to say,

>> Eddie: yeah, I think I think it's the people who do the hands on, they're gonna have more of an appreciation for the other open source projects that they use. But the people who hold the purse strings in the company are never going to look down the details of, of the projects that are being used. They don't they don't kind of care what package or NPM package is being used. And should should they fund, you know, should they donate to those projects? I think that's something that hopefully in the future can can change.

>> Gina: I hope so too. I think it would, it would lead to quite a boom in open source. I mean, the whole internet is built on open source, our smartphones are primarily built on open source, you would think that at this point, there would be like a better business model than hoping that people give you money out of the out of the bottom of their hearts, basically. So 

>> Eddie: and it's the people that give them money and not the people that are you know, the big players in the companies that probably have money. Yeah, I find quite interesting. It's people who are new in the tech and so forth are sharing their hard earned money. Exactly. The people who have earning hundreds of 1000s a year. They're not interested. They don't care. It's kind of below them. Not in a bad way. But it's just something they don't kind of care about.

>> Gina: Yeah.

>> Eddie: Yeah. Hopefully, that's something we can we can all change and improve on. So Oh, it was I pressed. You broke it. I fixed it. I fixed it. 

>> Gina: Yeah, you find it. Okay.
 
>> Eddie: I pressed the wrong button on the stream deck. Gotta get used to my new back to being to my new office. Let's have a look. I think before we go on to this question, I want to say one thing. And this is one thing that when people say hey, I'd love to donate, you donate to your GitHub sponsors, and sometimes I asked this and or if they say it, I say I'm gonna donate $5 to you. One thing I do say is that I really appreciate that thank you so much. But if you can donate $5 maybe just give me $1 and donate the other four to four other people in the open source community. And I because for me, $1 and $5 Yes, as a five times value difference, but I didn't i'd love other people to get that because just that $1 still gives me the motivation to kind of you know, do more and keep going. Even when people share things on social I don't know about you, but I love it when if someone took a screenshot of this and shared it on socials, I'm gonna give it a like for sure, but if they add some value that something they learn, like if they said, Oh, I love this, this tip that Gina gave is something I want to work towards or something like that, then I want to retweet that because then they're adding it's a bit like open source. They're adding value to the conversation. no hint there, everyone took a screenshot of this and share something that you'd like. Okay, sorry. So back to this. So, privatization of AI in open source? I don't know much about this area. I'm not sure about you. 

>> Gina: Me neither. Sorry. 

>> Eddie: Okay, we'll have to have to move on. If anyone has any thoughts on that, do share it in the in the chat, do answer to those questions in the chat, because it is quite interesting. And while you're there, give this video a thumbs up and subscribe if you haven't already. And Gina's details are in the description below, as you can go follow on socials and so forth and find out what exciting stuff is going on. Let's have a look. Ross, have you got in the chat? Have you ever missed too many questions? If I have, copy and paste them? And again, here's a question by Vyvy-vi, which is quite interesting. And it's quite a kind of a general open source question about security. Should people find out about what software they're using from a security perspective?

>> Gina:  Oh, definitely, definitely. And I'm actually kind of shocked that so many companies aren't. So I mean, I should probably not complain too loudly about that. Because I also, I mean, I look at the stuff that I use, but I do not look completely down the dependency tree on everything, right. And that can be quite long. It's not as bad in Python as it is in the NPM ecosystem, I gotta say. So whenever I look into the dependency folders there, it's like 1000s of packages. That's insane. But yeah, so that is really something that people should be looking at. And should also, I mean, my personal opinion is if I am a company, and I found my company, somehow, or my built my company somehow on open source, shouldn't I as a company have a very, very deeply ingrained interest in this open source projects could to continue to be maintained and to get fixes and to see security fixes also, and also maybe to see new features and all that because that would be my logic, were I in this position as for example, as a CTO or something? Because building my company on something that I do not control in any way? Not even in this in the tiny, tiny way where I shove money in his general direction? is a bit. I don't know. Not really careful, not really good. Planning, like, very risky.

>> Eddie: Yeah, I think a lot of people don't worry about things until they start having breaks or screams and so on. I see a lot of companies don't worry about like automated testing, don't worry about, you know, penetration testing or accessibility until something goes wrong. And by then it's it's too late anyway.

>> Gina: Yep. The same goes for a library that no longer gets not no longer sees updates, right. I mean, we don't do not even have to look at security for that to be painful, possibly.

>> Eddie: True. I had a question. I've just forgotten. Oh, yes, GitHub stars. So I know, people always ask me how I became a GitHub star and my thoughts and you've heard me say this, like 100 times. So I'd love to hear it. You know, the story of how it became about and I've no, anything else you want to share on that? Really?

>> Gina: I'm not really sure if there is big, that big of a story to it. Because I just suddenly found an invite in my email in my email box and was like, who what is that some kind of new program that I had heard about? And then I took a look at it. That was like, Okay, that sounds interesting. Because not only is it kind of appreciation for yourself that you know, apparently what you're doing means and matters in a way that it gets recognized by a company like GitHub, but it also gives me basically a back channel to people that are whose product and whose platform I daily interact with. So that has been really, really nice on both both of both sides. And yeah, so when I, when I got the invite, I was like, oh, that would be awesome. And then I actually got the confirmation and the day that confirmation arrived, that I was now a GitHub star, so I was like, I'm still waiting for my care package, because some stuff got delayed, but yeah, but it's okay. I mean,

>> Eddie: you could watch a YouTube video on me unboxing mine if you want. I mean that I thought that was

>> Gina: Yeah, I was I was actually thinking about that. But then figured, maybe I will just maybe that will make the weight harder, you know, well,

>> Eddie: that's what I say to you.
 
>> Gina: So so I'm going to just wait a bit longer on on whenever it arrives. I'm also still waiting for my Github Community star award thing. 

>> Eddie: What Okay, actually, no, I'm maybe I'm waiting for that one as well. I think you you probably are as well.

>> Gina: I think they are getting printed at the same time or something.

>> Eddie: Yes. Yeah, that's the the 3d printing of our green bars, right?

>> Gina:  No, the other one the one that we got at the Nova event.

>> Eddie: There's so many so much swag for sending us I lose track every day I wake up well, I boxes arrived.

>> Gina: I only have got two so far. But but they were awesome. I mean, I mean, the light is from from from them. And the mic is from them and the pop filters from them. So

>> Eddie: Sure. On the water bottle, you got the water bottle, right.

>> Gina:  I also got the water bottle did so so I gotta say, I really love mine that I already have. So

>> Eddie: awesome.

>> Gina:  But I have it and I like I like having stuff that is awesome. Yeah.

>> Eddie: And then you're hanging out with the other GitHub stars and being in the in the GitHub, slack and Nova conference

>> Gina: and help each other on the slack. That's also really nice. I found so like, I have this problem. Does someone have an idea? Yeah, try this. Oh, it works. Thank you. So this is really awesome.

>> Eddie:  Exactly. And I know I wouldn't have met you Really? Because I don't I don't. I'm not in the 3d printing space. So for me, I wouldn't have discovered you. And same with the other people. You know, Santos in the chat? Actually, I probably would. I knew about Santos I think before because of the whole Angular space. So it's worked really well. And hopefully, we can encourage people to, you know, help more in the community so they can potentially become a GitHub star in the future. I think a lot of people think you've got to promote GitHub. I know I do. But I don't think you or others do you use GitHub, but you don't. You don't promote it. It's not what you do. I think other people then hopefully can be made aware that it's just adding value, I think, to the community and open source, which is what puts you on GitHub radar to become a potentially a GitHub star

>> Gina: at least as is my impression definitely as well. I mean, I do obviously when I use tooling provided by GitHub, for example, when I do stuff with GitHub actions, or so I talk about it, because for me personally, it's the right choice. And they just want to help people utilize it as well. But that for me, this does not qualify as promoting. That's more like, hey, for me, this worked. Maybe it works for you as well. If not, then no problem. So

>> Eddie: it makes sense. Okay, we got some more questions coming in as I'm getting a bit behind. So I want to bring these up. So I'm not contributing to bigger projects. And if I see myself as a potential employee, I don't think any recruiter would be impressed by any kind of my quality of contributions, any tips,

>> Gina: every recruiter that actually looks at open source contributions, I think will not really care about whether the project is big, but rather whether the contribution makes sense and adds value. So I would not worry about that too much Personally, I mean, I would do that if I was a recruiter I would not look at did this person contribute to I don't know this big node library? Or did they maybe just create a single tiny tool that solves one specific, tiny problem? But obviously, well, or maybe they contributed a bug fix to a tiny tool? That's also problem. So I think this is it's, it's more important, I think, to contribute value, then what project you contribute that value to? At least I hope, this is also how recruiters see it. And if they don't, personally, I would not want to work for them. But yeah,

>> Eddie:  true. I think a lot of recruiters just look at is your profile, busy, lots of green? They don't Yeah, that's deeper until I do cuz I do recommend people to have an active profile with, you know, a fair amount of green because the first impression, and then hopefully, later on, the hiring manager is going to dig deeper actually look at the value added. But I don't think your recruiters ever going to dig deeper understand what a good issue is, or what a good pull request is, or anything like that. So yeah, it is. It is it is a challenge, but I think a lot of them are becoming more aware of it, though, as in hopefully, they'll educate themselves a bit to least look a little bit further into it.
 
>> Gina: I would hope so, because I mean, getting a really green github profile is like one cron job away. And I mean, you can completely automate that. So it's, it's, it says absolutely nothing as long as you do not actually dig into what these green dots consist of. And in that moment 

>> Eddie: Yes, true. But I don't recommend anyone automating it because for me when I'm reviewing someone's profile, yes, if it's more green, I think it looks more impressive. I want to dig deeper, but as soon as I find out something's automated like that.I discard their entire appplication and literally just

>> Gina: yeah, I would also not recommend I mean what you can do you can do that for fun if you just want to play around with it on a thowaway profile if you just want to figure out how it works like for experimenting but in general no I would not do that on my profile

>> Eddie: me neither

>> Gina: And I would also not I mean I would also refrain from drive-by pull request or something like that just to have activity right because it is also if you just fix a typo somewhere which wasn't actually a typo or like the typical commits that you get during hactoberfest when people try to pad their profiles up so that they can reach these so these kind of commits are not really actually those that are not actually adding value, you should not try to do them I think just to make your profile more green you should just add value, be yourself and if it's fit if it's not a fit, it's not a fit and I don't think it make sense to try to be something or someone you're not just in order to hired in some position where you then will hate it because they assume you were someone else and also you should not force yourself to work or try to work on big projects which are already drowninng in contributors anyhow probably because they are way high profile and people think they can pet maybe also their cb with that and instead there are a lot of low hanging fruits all over the open source community contributing to projects that desperatly need help and would love help in any shape or form and yeah just tackling that kind of stuff would also help you to have a busy profile and learn and discover new technologies and find new friends as well lot of I met quite a number of friends during opensource work and yeah, would not make you feel so stressed all the time.

>> Eddie: yeah I agree, I think a lot of those bigger people want to put on their cv, I conributed to react or whatever they move so fast that you get disheartened a lot as your pr just ends up with lots of conflicts and you know you're just kind of you're you're smaller what's the expression you're you're a smaller kind of peace of the puzzle I dont know what the expression is

>> Gina: commit, no

>> Eddie: yeah I think there's nothing to do with cogs like you're a smaller cog in the wheel or something I dont't know but it;s you yopu're you know

>> Gina: yeah yeah yeah

>> Eddie: Pull request going on that yours is just you know if you contribute to a project like you said that's moving slower and that welcomes contributions more and maybe getting a pull request like three 
pull request a week then yours are gonna get more attention whereas when you contribute to a bigger project that's maybe getting 30 pull request a day then yours is going to disappear very quickly maybe not they get the attention you wont learn as much a network as muuch as you need 

>> Gina: exactly

>> Eddie: so it's true so um I'am not sure if we can if this is a qiestion or transcript Not the dependency chart of everything, as you mentioned, yeah, just goes deeper and deeper. And I think, as Gina was saying, you cannot go all to the nth level of it. I think it's just, you would like to think that you trust the projects you include. And they trust the projects. They include, I'm guessing, and so on. Not sure if that's a safe bet or not, but 

>> Gina: it's probably not. But let's just assume it is so we can all sleep at night.

>> Eddie: That's true. And I think GitHub is doing all the great work with security. And there are other platforms, as well.

>> Gina: Yeah, definitely.

>> Eddie: This is an interesting question. Someone asked me this the other day, and it definitely took me back. So Gina, what was your first open source contribution?

>> Gina: I think the official first open source contribution to someone else's project was I was quite heavily acquired research, quiet regular. Now that that's the word that I was looking for, was a quite regular contributor back in the day at the Docker wiki project, which is like a wiki engine, PHP base. This is also how I met one of my best friends, who is the who's who's the maintainer of the project. And three years ago from from whom I learned a lot about maintaining open source projects. And also, I got to meet a couple of times. So that was, yeah, one of the I think I first started writing plug ins for that. And then I started pulling ever I wrote my first ever fix for some bug in the engine itself. And I remember that I was quite
thrilled about having the patch get accepted. And yeah, so that was fun. And before that, I actually tried, tried to build something like docker wiki, myself at first before I came across Google wiki. And that was probably my first actual open source project with a license and all that. And even before that, so that was like when I was back, when I was still back in school around. Yeah, the late 90s. And the early 2000s. So late, late, late years at school, I actually wrote some stuff that these days I would consider open source, but they didn't actually have an open source license. So technically, they weren't.
But yeah, so that that is a long time ago in a galaxy far, far away.

>> Eddei: I think we covered this? Let me just bring up from VyVy-Vi? Is it bad of a profile is more green due to ci practices of multiple branches? For every feature? My understanding is only the default branches count yeah 

>> Gina: Yeah. Which is actually something which is for me, quite upsetting because after prints, default branches, the stable branch, which only sees merges when I put out a release. So my, my own GitHub profile is fairly misleading most of the time, because it looks like I'm not doing anything for weeks. And when in fact, I am just not on the main branch. Yeah, it jumps then it gets filled up, then. Yeah. But yeah, so you cannot you cannot just jump around between branches into stuff it only only stuff to the main branch actually counts for that thing. So you can do whatever you want with your ci on different branches. As long as it's not the main branch, it will not look bad. I think.

>> Eddie: It's true. Yeah, exactly. And I think some people get upset when they, they do a feature that maybe has 10 commits, but when it gets merged into the default branch, it gets squashed. People that won't clean history, right? It is important to me.

>> Gina: It is important. I mean, I sometimes do this as well, I gotta say, I gotta admit, when it's like, when when each commit is not actually 

>> Eddie: Yes, I know, you're gonna say

>> Gina: telling a whole story, but it's small, like, they do not work separate from each other. And you have to actually apply them all or none at all in order for the code to still stay sensible. Yep.

>> Eddie: What else? So someone's asking you about GitHub actions? I don't know much and your resources. Well, do you use GitHub actions for your project? You know, do you use something else 

>> Gina: a ton a ton. I just actually rewrote about a bot that I use for helping you with the issue tracker and made it use GitHub actions. And I wrote my first actions in, in Node as well for that. And, yeah, it's, it's, I gotta say, I currently consider it GitHub actions as the hammer to every single nail that I encounter regarding automation in the project, like labeling of prs automatically based on what files attached and yeah, I do stuff like that. I do tracking of labeling of issues based on certain keywords they contain. I also validate issues like have people actually included the background, making templates, for example, with a GitHub action, I auto close them if they don't contain the issue template after 14 days with a GitHub action than stale handling, and all that, and excessive testing set up. And I have this whole page build set up for the plug in repository, which is a static page powered by Jekyll, which pulls in dynamic data from the statistic page and all that and then builds it in all while the GitHub action. So I can only recommend getting into that stuff, it's fun, like really fun, like I enjoy when I get to write a new action kind of fun,

>> Eddie: is, is really, really awesome. It is just because you can write it, it just starts off with so many things like game of so try to start three different sentences. And there's just so many actions in the marketplace that you can use it to some yet basic yamo lines. And then if you want to customize it further, then you can use you know, so many different languages, like you said node or I think pythons are supported, I'm not sure but there are various languages that you can
 
>> Gina: you can use node or Docker, like you can fire up a doc. And then you can use use whatever. What I can also recommend if someone is trying to get into GitHub actions, and is maybe afraid a bit of getting their feet wet completely already with node or Docker based stuff, there is this fancy little kind of toolkit, which is an action itself, which is action slash GitHub slash script. And that allows you to just throw a bunch of JavaScript into the body of the action, which then gets executed. And I use that for some labeling actions. And that's like, you completely write that in yaml. Or rather, I mean, you still write JavaScript, but you dump it in the yaml. And it's just if you just need a one off kind of thing. And you cannot really find something on a marketplace that fits the bill. And it's really easy to because it's just like two queries against the GitHub API. And then maybe some logic in between or so then this is like, I constantly use this for for for stuff like that all the time. And it's, it's really easy to prototype things with that as well, if you have an idea how something might work, and maybe we'll put it in a proper action after for others to reuse. But you first want to test if if the idea in general works, then this is also great for that.

>> Eddie: Yeah, it's just someone's watching in the chat that you can use any language a Docker container. Exactly. It's just so flexible, you can trigger off any event in GitHub, and there's just so many things you can do. It's It is so much fun. I've seen people do games with GitHub actions. So in their README, they have like Noughts and Crosses, and then it raises an issue. And then the issue will then update the board in the readme and then you click on it and so forth. It's quite quite funny to see the things that people have done. I think even see mind sweep, which is really nice.

>> Gina:  I really need to up my README game. I think I currently just have a basic list of hi and Gina, and I'm doing this. Thank you for your for your attention. Bye bye. Yeah,

>> Eddie:  yeah, I think that the readme so much time on it, though, just tweaking it and improving it, and so on. We have a great question here, actually, what do you what are your thoughts on this? I have I have a thought I'd let you go first.
With me mean, Jake doesn't have a license, is it not considered open source?

>> Gina:  Not really not legally No, because the thing is that in order to say something is open source, the source has to rather than there has to be a license that actually allows to utilize it in certain ways. So, there is a definition by the Open Source Initiative that says what constitutes an open source license and what must what it must fulfill and what it must not fulfill. So, for example, it does it must not restrict your use of the software in any way or shape. So, it must not say something like, you may use this, but only in a non commercial setting or so in that moment, it is not under this definition, it is not open source. And in case of at least something like Germany, for example, we have the problem, I would not necessarily call it a problem. But when it comes to open source, it is an actual problem that any kind of created things like for example, sewers, are automatically copyrighted. So I do not have to apply for copyright for copyright for something that I created for it to be protected under under the law of copyright in Germany. So when I just throw some source up on GitHub, it is automatically copyrighted and under German law, and in theory, no one may use that. They may look at it, but they may not use it, and they may not copy it, and they definitely may not work build upon it. So in order for this to be legally viable, I have to attach your license to it because otherwise it's automatically protected under a very, very restrictive one. So at least I think in in the US and also in other countries. Under under in the world, it is probably different. But at least in Germany, and maybe even in all of Europe, I'm not entirely sure. But there are these very fine points in copyright law that make you very, very aware of once you actually look into the into it a bit how important it is to actually attach your license to your source and not just throw it up somewhere and be like, do whatever you want with it, because do whatever you want with it. There's not a license.

>> Eddie: I think I remember last time I was reading this. And again, you're right. Yeah, I think it's country specific. But if you don't put a license on something, you default to the terms and conditions of GitHub. And then it then I think it specifies certain countries, and you know, that can't I don't know if it can override certain country rules, or vice versa. But it doesn't make it open source. So you're absolutely right. And so choose a licensed website, by by GitHub has some really good comparisons and information. So yeah, I highly recommend people put a license on it, therefore is clear. And you can always change the license later if you want. It's my understanding.

>> Gina:  Be careful. Okay, so Okay, I actually gave a talk about this whole topic once at Maker Faire in Germany. So the thing is that what I would recommend is, if you want to choose a license for project actually read the license, yes, it's it's a lot of legalese. And it is hard to understand. But there are tools online that will help you like TLDR legal.com, for example, has all the open source licenses listed, and you can click on them, and it will explain the basic gist of what is in there, like, allows that in that case of use, contains liability or doesn't contain liability allows resharing or not, with or without attribution and all that and you can look at that. And then you have to think long and hard about whether you actually want to license your work under that. And if you're comfortable. For example, if you choose something like the MIT license, which basically just says Do whatever you want, you just need to keep this copyright notice intact and you cannot sue me for any damages that my code causes.
You when you use this license, you have to be aware that accompany may come take your code and build a multimillion dollar company of it or product of it. And you will get Not a single dime and not even actual recognition. And you need to be aware that this can happen. I mean, the likelihood is very small. But still it can happen and you should be comfortable with this thought. And if you're not then you need to choose another license. Something maybe that is viral like the GPL or so where they at least are forced to publish the services that they built on your on your work on top of your work.
Because and this is where your former question comes in. And relicense relicensing of your code can become quite tricky. As long as you are the only person who wrote it, then there is no problem. 

>> Eddie: Right? Okay.

>> Gina:  But as soon as you want to introduce a license, for example, if you want to switch from MIT to a somewhat more restrictive GPL, because the GPL has this viral virality clause in it. You actually need to ask everyone who even contributed a single line to your code, or even just a single character if they are okay with that. And if they say no, then you have to replace whatever they contributed. Right. 
>> Eddie: Okay, interesting.

>> Gina: Yeah. So this is the reason why entrepreneur to this day is still a GPL licensed. Because I started off cura as I mentioned, cura was licensed a GPL. So I inherited that license, because it's viral.
And these days, I actually would prefer to be able to just switch it over to something slightly different, more like the lgpl. Maybe because it would make more sense in the case of something that is more like a platform or framework at this point, then, like a network appliance or something like that, for which the A GPL this moment, but in order to do that I had to I would, I would need to get the legal permission from every single person who ever contributed to both the parts of cura that are still in my calm layer, as well as everyone who ever even put a single digit somewhere in an octoprint's code. And this is like,

>> Eddie: how many people like hundreds or thousands?

>> Gina:  Yeah, I actually do not know right now how big the network graph is, but it's quite a number of people. And frankly, I do not, I do not think that many would answer

>> Eddie: true.

>> Gina:  So I mean, even if they I would technically be okay with it. Right? Try getting people's email addresses first and trying to get in touch with them, then trying to get permission from them. So yeah, best settle on a license that you are completely 100% comfortable when you release something because changing it depending on how many people have already contributed can be a big pain in the behind.

>> Eddie: That is true. Okay, I wasn't aware of that. So I learned something new as well, which is great, which is why I like collaborating with so many people and just chatting to people because you always learn different things. I know we've covered this already. Just to say that I don't think there is a best license choose one that you're comfortable with probably. 

>> Gina: I prefer I mean, there are a couple of popular ones.

>> Eddie: So I go there, which ones Yeah, popular.

>> Gina: There are I mean, the the most common ones these days are the GPL, the MIT and the BSD I would say, maybe a bit of the Apache two stuff. But that's that depends a bit on the in on the on the ecosystem, you find yourself in I know, Apache two is quite, quite popular in the Java group. But I've seen it less and less in the in the Python and Node JS ecosystem. So yeah, and I would just suggest to sit down and read through the most common ones. I mean, on the one side, you have the viral stuff like the GPL, the GPL, the LGB, LGPL. And on the other side, you have the non viral stuff like the MIT, the BSD, the Apache two and a bunch of other things. And just, yeah, go on TLDR legal.com, click through them, and just figure out what the differences are and what you want for yourself. Personally, I saw small stuff that I primarily write to quickly fix some kind of problem that I have, and that I then just throw online don't give a lot of maintenance for or something more like I merge prs when they come in, and if there's a big bug in the heaven it idea of how to fix it, I fix it. But otherwise, it's not that big of a priority and more like a pet project. I usually these days licensed under MIT.

>> Eddie:  Okay,

>> Gina:  because it's like a here you have it. I don't really care about it. Have fun with it, use it if it is useful for you. Yeah. And if not, then well, what what are you doing here. But for things that I really care about, like octoprint, I would never even if I had the choice, I would never license entrepreneur under something like an MIT or BSD BSD license. Because this this viral character, in this case, there is such as too much work on this, that I do not really want to have to face the situation that I have now actually faced a bunch of times with companies who simply ignored the license, that they put it in some kind of product of this claim, it's theirs and make a ton of money from it. So especially considering the fact that I'm trying to live from the work that I put in this, right, it's like, also, I think it's. I mean, I know this is kind of a philosophy, philosophical war a bit going on there between the between the viral and the non viral camp when it comes to open source licenses. But personally, I think, if we want to somehow get companies to actually respect and and realize that open sources work, and that it doesn't fall from the sky, and that maybe they need to, they need to contribute back to it something like dual licensing or something would also be an option. Like, if you are using my, my stuff in an educational or in a private setting, then it's licensed under and under, under, under under MIT and otherwise, it's GPL or something like that, or the other way around. Sorry. So you can do stuff like you can buy a different license, of course, for that you need to have everything under your control. But yeah,

>> Eddie: that is a really interesting one. Actually, I do I do like having two licenses. You know, if you're using it for a pet project or for some educational school, then fine you know, use it for whereas if you're going to make money out of it, then you've got to Yeah, you got to some clause you got to have you got to keep your code open source as well or whatever it is

>> Gina:  exactly.

>> Eddie:  What do you like that actually that's really interesting. I something I think I want to start doing, having your license. I have to look more into that. I got some people in the chat. I did paste in some examples. The about MIT and were like Ansible, bash and GIMP. You sorry, where is it? babble dotnet core rails use MIT, whereas Ansible, bash and GIMP use GPL version three. And then Santos is saying that Angular is MIT. So it's always Yeah, always, always quite interesting to see what other projects are using.

>> Gina: Yeah,

>> Eddie: yeah. When you including other projects in your project, you need to look at those as jr was saying, because they Oh, yeah, is what you can do with it, can you sell it, and so forth, because you might get to sell it awesome, need to have open source. 

>> Gina: Now, you also need to be very, very careful when for example, not every not all licenses are comparable to each other. For example, you cannot I'm trying to think of a good example right now, but I can't for the life of me. In theory, there are certain license situations where if I having a having my stuff licensed under a GPL would try to utilize this library under something else, which I can think of right now. Then this would not work because the licenses would be out.
negate each other and not negate. But you know, like, they would have clauses that conflict with with with each other. So it is very important that whenever you work on something that is open source to actually check if you can include it. For example, if you work on something that is MIT, I think you cannot incorporate stuff that is licensed under the GPL without relicensing your own project as GPL, because the viral clause in the GPL restricts things further. So that the MIT right You, you, you would give your stuff away for free, but
so completely for under under terms of MIT, but if you bind against stuff that is GPL, or pull whole code snippets in that are GPL, you are doing the same to that as well. And this is against this license, because this licenses, you may only share it if you share it the like so with a GPL orange GPL compatible license, which I think actually hasn't has an exception for MIT. But still, I mean, 

>> Eddie: yeah, there was a famous story, I can't remember the the project or the company name, but they had built this open source project that had done really well for like, I think, like seven years. And then they thought, you know, what we want to we want to make it a closed source project. Because now it's like, it's, it's, it's done so well. But obviously, by the licensing, they couldn't just do that. So they kept this open source version that the community can maintain. And the company took the code and started a closed source version. and legally, it was correct. They found a loophole, but oh my god, everyone hated that company forever afterwards after doing that, because literally, they just didn't, 

>> Gina: actually happens actually quite a lot. We also had a case like this in the 3d printing space a couple of years ago, when a when a popular when a popular piece of positive firmware. No, it was the host software, popular piece of basically like a competitive, competitive, competitive octoprint, but a desktop application went close source. People were like, oh,
and it was a bit tricky in this case, because they kept the they kept the oldest old version kept, kept it open source, but all the code was owned by this one person. So that the license, in this case, the license, which was completely legally fine, because I mean, if if all the people that did that, that wrote the code, say it's okay to do then it's okay to do and then this case that the code was basically built on the shoulders of one single guy, so that was fine. And this person had to eat. So they made this decision. So sometimes it's okay. And I mean, it feels weird. And you look at that, it's situations like this, and I like. But I mean, there's always two sides to the story.

>> Eddie:  Of course, I think that's where it goes back. If we go covalent, almost gone full circle, I'm looking at the clock, I'm gonna have to call it a day soon. But full circle to that. I say now, but yeah, full circle to if companies could spawn could donate or sponsor these projects, and it becomes less of an issue. And a lot of these companies, you know, spend 1000s per day on contractors working on their project, they don't think about the Free Software they're getting, where if they just gave kind of $100 a month, it would just be and so many of these companies did that even probably $10 a month, which would be a drop in the ocean for them, then it would just really helped open source move so much faster, so many more people could go full time on open source, and then though, then the tools that they're using could then move so much faster. I think there are so many ways to make money from open source and sponsorship is just one way but it does look like it is that is growing, Because selling support. Like you said it was always been popular in the past, but it's not great. 

>> Gina: It's it doesn't scale. Yeah,

>> Eddie:  exactly. Exactly. So yeah, it's definitely something to think about. And I think it's gonna be, it's gonna be interesting. In the near future, I think people have a commitment to GitHub doing github sponsors, right. So now anyone? Okay, some countries aren't covered yet. But the number is increasing often? Well, look, I think it was like mid 30s in our countries that were supported. But anyone can create an account on GitHub sponsors, and people can give them money. I know we have people in my community that have really helped out I say, please create an sponsorship account. It's free just to apply for it. But why would I do that? Who would want to give me money as I'm hinting to you? I want to give you money. You'd be really helpful. Thank you so much. So yeah, I think more and more people should apply for that and go and add value, like you said to projects, just go add value and add value isn't always just pull requests and, and so forth. So yeah, it's really interesting. I think it's just been such a great discussion, especially the licenses. That was a really a good pleasant surprise, but I think it's a lot of people a lot of things that Sorry, it's a subject that people shy away from a lot. I know I do. Yes, crazy, but it's good that you've done your research, you know about these on a talk on it, and so on. 

>> Gina: I would link you to talk, but it's in German, sadly.

>> Eddie: So yeah, my jam is not so good. You have to do an English version.

>> Gina: I mean, I could do the slides in English maybe at some point. But yeah, so it was, it was quite a good and nicely filled talk as well. I gotta say, I was pleasantly surprised by that back then because I figured if I go, it was it was at the Maker Faire in Germany. So like, a lot of people who just build stuff and are usually not even remotely thinking about licensing, so not software people primarily but more like tinkerers and hardware tinkerers, and, and people who need to maybe, and stuff like that. And I just figured maybe it would be good to try to shed some light on this topic. Because as an open source stuff, like it's, it's something that I actually had to think about and learn about.
And at first, I was a bit worried when I handed in this this talk, that the somewhat dry topic would maybe scare people off, but apparently they were actually interested in happy that someone would would explain it to them. So yeah, that was a nice experience as well. Maybe at some point, I have to give it again in English or something. I don't know. 

>> Eddie: I think so. I think it'd be very popular, it is something that people don't would like to know more about, but don't want to talk about it just don't know. So I think it'd be really good.
Okay, I think last final question, I think is quite interesting one. So Apollo, thank you so much for the question. And I don't I'm not sure about it about this. So I'm interested here with Gina things. I've had an experience or any stories to share on this.
So the question is, how would someone under 18 make money from open source? Does it does it change? Because they're under 18? I don't know.

>> Gina: I'm not entirely sure about for example, GitHub Terms of Service, but I'm pretty sure you have to be of legal age, in order to open account, open an account open an account dear me My tounge is tricky today. Probably, that's probably
for for Patreon. I think you have to be legal. And yeah, I could imagine that this be tricky, because I probably I would imagine that a lot of companies like GitHub, or Patreon would probably like to have you as a creator on board but but it would be like a legal minefield for for them to do it. So that makes it probably a bit tricky. Maybe if you had support by a guardian, or like a parent or someone that's that's about the only advice that I can give here because I don't know it's Yeah,
it is a legal minefield, I mean, I see it with with with stuff like a support forum, only just where you suddenly have to think about stuff like copper and, and and, and the child protection
laws in Germany and all that and everything becomes extremely complicated. Just because you have a public forum, I do not even want to think about being a payment provider or payment service in that case.

>> Eddie: That is very true. It says I want to take up any more of your time I really appreciate you taking the time out to come and chat to my community and you bringing some of your community over because you had a stream just before us and Yeah. Is there anything else you'd like to say as a as a closing note or give yourself a shout out talk about you know, give us your project shout out Feel free to to do that.

>> Gina:  I actually just thank you for the opportunity. I had a lot of fun here. And it's nice to to talk about all things open source and not just octoprint for once 

>> Eddie: but everyone good to go check out Octoprint and do have a look at it. It's been going for quite a few years and I'm interested to see how it looks. I'm gonna go check it out myself off of the stream as well.

>> Gina: Perfect.

>> Eddie:  okay.Thank you again so much. Everyone will say our bye's and give the video a thumbs up subscribe if you haven't already. Check out Gina social channels in the links below Einstein one of them's not working. I'm gonna go check this out after the stream. Gina hold on for like two minutes. I want to stop the stream. I just want to thank you again as well. So everyone have a great weekend. Remember a green square a day keeps Eddie away. So keep contributing adding value to open source.
Okay, let me try remember to bring up the holding screen. Wait.
I like this setup. We'll see I like me being smaller than my guests being big. I think that's that's pretty, pretty cool. But lots of people saying thank you in the chat and good night. So that's cool. Thanks, everyone.

>> Gina: Bye bye.


